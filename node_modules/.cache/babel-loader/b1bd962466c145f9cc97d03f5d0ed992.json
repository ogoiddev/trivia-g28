{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { setRanking } from '../actions';\n\nclass Gameplay extends Component {\n  componentDidMount() {\n    const {\n      token,\n      fetchingQuestion,\n      dispatch\n    } = this.props;\n    fetchingQuestion(token);\n    dispatch(setRanking());\n  }\n\n  render() {\n    const {\n      questions,\n      loading,\n      questionIndex,\n      history\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, loading ? 'Carregando...' : questions.filter((_, index) => index === questionIndex).map(element => /*#__PURE__*/React.createElement(Answers, {\n      key: element.question,\n      category: element.category,\n      difficulty: element.difficulty,\n      question: element.question,\n      correctAnswer: element.correct_answer,\n      incorrectAnswers: element.incorrect_answers,\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 32\n      }\n    })));\n  }\n\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.getQuestions.questions.results,\n  loading: state.getQuestions.loading,\n  questionIndex: state.questionId.index,\n  player: state.player\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingQuestion: token => dispatch(fetchQuestions(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx"],"names":["React","Component","connect","PropTypes","fetchQuestions","Answers","setRanking","Gameplay","componentDidMount","token","fetchingQuestion","dispatch","props","render","questions","loading","questionIndex","history","filter","_","index","map","element","question","category","difficulty","correct_answer","incorrect_answers","propTypes","string","object","bool","isRequired","mapStateToProps","state","getQuestions","results","questionId","player","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,UAAT,QAA2B,YAA3B;;AAEA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAC/BO,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,gBAAT;AAA2BC,MAAAA;AAA3B,QAAwC,KAAKC,KAAnD;AACAF,IAAAA,gBAAgB,CAACD,KAAD,CAAhB;AACAE,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,OAAb;AAAsBC,MAAAA,aAAtB;AAAqCC,MAAAA;AAArC,QAAiD,KAAKL,KAA5D;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,OAAO,GAAG,eAAH,GACJD,SAAS,CACRI,MADD,CACQ,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAAK,KAAKJ,aADhC,EAECK,GAFD,CAEMC,OAAD,iBAAc,oBAAC,OAAD;AACjB,MAAA,GAAG,EAAGA,OAAO,CAACC,QADG;AAEjB,MAAA,QAAQ,EAAGD,OAAO,CAACE,QAFF;AAGjB,MAAA,UAAU,EAAGF,OAAO,CAACG,UAHJ;AAIjB,MAAA,QAAQ,EAAGH,OAAO,CAACC,QAJF;AAKjB,MAAA,aAAa,EAAGD,OAAO,CAACI,cALP;AAMjB,MAAA,gBAAgB,EAAGJ,OAAO,CAACK,iBANV;AAOjB,MAAA,OAAO,EAAGV,OAPO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFnB,CAFN,CADF;AAgBD;;AA1B8B;;AA6BjCV,QAAQ,CAACqB,SAAT,GAAqB;AACnBnB,EAAAA,KAAK,EAAEN,SAAS,CAAC0B,MADE;AAEnBN,EAAAA,QAAQ,EAAEpB,SAAS,CAAC2B,MAFD;AAGnBf,EAAAA,OAAO,EAAEZ,SAAS,CAAC4B;AAHA,EAInBC,UAJF;;AAMA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCzB,EAAAA,KAAK,EAAEyB,KAAK,CAACzB,KADqB;AAElCK,EAAAA,SAAS,EAAEoB,KAAK,CAACC,YAAN,CAAmBrB,SAAnB,CAA6BsB,OAFN;AAGlCrB,EAAAA,OAAO,EAAEmB,KAAK,CAACC,YAAN,CAAmBpB,OAHM;AAIlCC,EAAAA,aAAa,EAAEkB,KAAK,CAACG,UAAN,CAAiBjB,KAJE;AAKlCkB,EAAAA,MAAM,EAAEJ,KAAK,CAACI;AALoB,CAAZ,CAAxB;;AAQA,MAAMC,kBAAkB,GAAI5B,QAAD,KAAe;AACxCD,EAAAA,gBAAgB,EAAGD,KAAD,IAAWE,QAAQ,CAACP,cAAc,CAACK,KAAD,CAAf;AADG,CAAf,CAA3B;;AAIA,eAAeP,OAAO,CAAC+B,eAAD,EAAkBM,kBAAlB,CAAP,CAA6ChC,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { setRanking } from '../actions';\n\nclass Gameplay extends Component {\n  componentDidMount() {\n    const { token, fetchingQuestion, dispatch } = this.props;\n    fetchingQuestion(token);\n    dispatch(setRanking());\n  }\n\n  render() {\n    const { questions, loading, questionIndex, history } = this.props;\n\n    return (\n      <div>\n        {loading ? 'Carregando...'\n          : questions\n            .filter((_, index) => index === questionIndex)\n            .map((element) => (<Answers\n              key={ element.question }\n              category={ element.category }\n              difficulty={ element.difficulty }\n              question={ element.question }\n              correctAnswer={ element.correct_answer }\n              incorrectAnswers={ element.incorrect_answers }\n              history={ history }\n            />))}\n      </div>\n    );\n  }\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.getQuestions.questions.results,\n  loading: state.getQuestions.loading,\n  questionIndex: state.questionId.index,\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchingQuestion: (token) => dispatch(fetchQuestions(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);\n"]},"metadata":{},"sourceType":"module"}