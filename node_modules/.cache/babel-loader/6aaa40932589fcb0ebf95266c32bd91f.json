{"ast":null,"code":"export const LOGIN_SUCCEEDED = 'LOGIN_SUCCEEDED';\nexport const CATCH_TOKEN_SUCCEEDED = 'CATCH_TOKEN_SUCCEEDED';\nexport const ERROR = 'ERROR';\nexport const GET_QUESTIONS_SUCCEDED = 'GET_QUESTIONS_SUCCEDED';\nexport const GET_QUESTIONS_FAILED = 'GET_QUESTIONS_FAILED';\nexport const TIMER_ACTION = 'TIMER_ACTION';\nexport const STOP_ACTION = 'STOP_ACTION';\nexport const LOADING = 'LOADING';\nexport const QUESTION_INDEX = 'QUESTION_INDEX';\nexport const SCORE_SUCCEEDED = 'SCORE_SUCCEEDED';\nexport const RANKING = 'RANKING';\nexport const loginAction = payload => ({\n  type: LOGIN_SUCCEEDED,\n  payload\n});\nexport const getToken = payload => ({\n  type: CATCH_TOKEN_SUCCEEDED,\n  payload\n});\nexport const errorAction = payload => ({\n  type: ERROR,\n  payload\n});\nexport const getQuestions = payload => ({\n  type: GET_QUESTIONS_SUCCEDED,\n  payload\n});\nexport const getQuestionsFail = payload => ({\n  type: GET_QUESTIONS_FAILED,\n  payload\n});\nexport const scoreAction = payload => ({\n  type: SCORE_SUCCEEDED,\n  payload\n});\nexport const timerAction = payload => ({\n  type: TIMER_ACTION,\n  payload\n});\nexport const stopActionTime = () => ({\n  type: STOP_ACTION\n});\nexport const loading = () => ({\n  type: LOADING\n});\nexport const questionIndex = payload => ({\n  type: QUESTION_INDEX,\n  payload\n});\nexport const setRanking = payload => ({\n  type: RANKING,\n  payload\n});\nexport const resetRedux = () => ({\n  type: null\n});","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/actions/index.js"],"names":["LOGIN_SUCCEEDED","CATCH_TOKEN_SUCCEEDED","ERROR","GET_QUESTIONS_SUCCEDED","GET_QUESTIONS_FAILED","TIMER_ACTION","STOP_ACTION","LOADING","QUESTION_INDEX","SCORE_SUCCEEDED","RANKING","loginAction","payload","type","getToken","errorAction","getQuestions","getQuestionsFail","scoreAction","timerAction","stopActionTime","loading","questionIndex","setRanking","resetRedux"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AAEP,OAAO,MAAMC,WAAW,GAAIC,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEb,eADiC;AAEvCY,EAAAA;AAFuC,CAAd,CAApB;AAKP,OAAO,MAAME,QAAQ,GAAIF,OAAD,KAAc;AACpCC,EAAAA,IAAI,EAAEZ,qBAD8B;AAEpCW,EAAAA;AAFoC,CAAd,CAAjB;AAKP,OAAO,MAAMG,WAAW,GAAIH,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEX,KADiC;AAEvCU,EAAAA;AAFuC,CAAd,CAApB;AAKP,OAAO,MAAMI,YAAY,GAAIJ,OAAD,KAAc;AACxCC,EAAAA,IAAI,EAAEV,sBADkC;AAExCS,EAAAA;AAFwC,CAAd,CAArB;AAKP,OAAO,MAAMK,gBAAgB,GAAIL,OAAD,KAAc;AAC5CC,EAAAA,IAAI,EAAET,oBADsC;AAE5CQ,EAAAA;AAF4C,CAAd,CAAzB;AAKP,OAAO,MAAMM,WAAW,GAAIN,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAEJ,eADiC;AAEvCG,EAAAA;AAFuC,CAAd,CAApB;AAKP,OAAO,MAAMO,WAAW,GAAIP,OAAD,KAAc;AACvCC,EAAAA,IAAI,EAAER,YADiC;AAEvCO,EAAAA;AAFuC,CAAd,CAApB;AAKP,OAAO,MAAMQ,cAAc,GAAG,OAAO;AACnCP,EAAAA,IAAI,EAAEP;AAD6B,CAAP,CAAvB;AAIP,OAAO,MAAMe,OAAO,GAAG,OAAO;AAC5BR,EAAAA,IAAI,EAAEN;AADsB,CAAP,CAAhB;AAIP,OAAO,MAAMe,aAAa,GAAIV,OAAD,KAAc;AACzCC,EAAAA,IAAI,EAAEL,cADmC;AAEzCI,EAAAA;AAFyC,CAAd,CAAtB;AAKP,OAAO,MAAMW,UAAU,GAAIX,OAAD,KAAc;AACtCC,EAAAA,IAAI,EAAEH,OADgC;AAEtCE,EAAAA;AAFsC,CAAd,CAAnB;AAKP,OAAO,MAAMY,UAAU,GAAG,OAAO;AAC/BX,EAAAA,IAAI,EAAE;AADyB,CAAP,CAAnB","sourcesContent":["export const LOGIN_SUCCEEDED = 'LOGIN_SUCCEEDED';\nexport const CATCH_TOKEN_SUCCEEDED = 'CATCH_TOKEN_SUCCEEDED';\nexport const ERROR = 'ERROR';\nexport const GET_QUESTIONS_SUCCEDED = 'GET_QUESTIONS_SUCCEDED';\nexport const GET_QUESTIONS_FAILED = 'GET_QUESTIONS_FAILED';\nexport const TIMER_ACTION = 'TIMER_ACTION';\nexport const STOP_ACTION = 'STOP_ACTION';\nexport const LOADING = 'LOADING';\nexport const QUESTION_INDEX = 'QUESTION_INDEX';\nexport const SCORE_SUCCEEDED = 'SCORE_SUCCEEDED';\nexport const RANKING = 'RANKING';\n\nexport const loginAction = (payload) => ({\n  type: LOGIN_SUCCEEDED,\n  payload,\n});\n\nexport const getToken = (payload) => ({\n  type: CATCH_TOKEN_SUCCEEDED,\n  payload,\n});\n\nexport const errorAction = (payload) => ({\n  type: ERROR,\n  payload,\n});\n\nexport const getQuestions = (payload) => ({\n  type: GET_QUESTIONS_SUCCEDED,\n  payload,\n});\n\nexport const getQuestionsFail = (payload) => ({\n  type: GET_QUESTIONS_FAILED,\n  payload,\n});\n\nexport const scoreAction = (payload) => ({\n  type: SCORE_SUCCEEDED,\n  payload,\n});\n\nexport const timerAction = (payload) => ({\n  type: TIMER_ACTION,\n  payload,\n});\n\nexport const stopActionTime = () => ({\n  type: STOP_ACTION,\n});\n\nexport const loading = () => ({\n  type: LOADING,\n});\n\nexport const questionIndex = (payload) => ({\n  type: QUESTION_INDEX,\n  payload,\n});\n\nexport const setRanking = (payload) => ({\n  type: RANKING,\n  payload,\n});\n\nexport const resetRedux = () => ({\n  type: null,\n});\n"]},"metadata":{},"sourceType":"module"}