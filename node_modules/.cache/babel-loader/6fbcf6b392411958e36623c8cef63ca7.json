{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nconst DIFFICULT_POINTS = {\n  hard: 3,\n  medium: 2,\n  easy: 1\n};\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    const {\n      token,\n      fetchingQuestion\n    } = this.props;\n    fetchingQuestion(token);\n  }\n\n  render() {\n    const {\n      questions,\n      loading\n    } = this.props;\n    const {\n      questionIndex\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, loading ? 'Carregando...' : questions.filter((_, index) => index === questionIndex).map(element => /*#__PURE__*/React.createElement(Answers, {\n      key: element.question,\n      category: element.category,\n      question: element.question,\n      correctAnswer: element.correct_answer,\n      incorrectAnswers: element.incorrect_answers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 32\n      }\n    })));\n  }\n\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool\n}.isRequired;\n\nconst mapStateToProps = payload => ({\n  token: payload.token,\n  questions: payload.getQuestions.questions.results,\n  loading: payload.getQuestions.loading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingQuestion: token => dispatch(fetchQuestions(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx"],"names":["React","Component","connect","PropTypes","fetchQuestions","Answers","DIFFICULT_POINTS","hard","medium","easy","Gameplay","constructor","state","questionIndex","componentDidMount","token","fetchingQuestion","props","render","questions","loading","filter","_","index","map","element","question","category","correct_answer","incorrect_answers","propTypes","string","object","bool","isRequired","mapStateToProps","payload","getQuestions","results","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,OAAP,MAAoB,8BAApB;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,MAAM,EAAE,CAAnB;AAAsBC,EAAAA,IAAI,EAAE;AAA5B,CAAzB;;AAEA,MAAMC,QAAN,SAAuBT,SAAvB,CAAiC;AAC/BU,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA8B,KAAKC,KAAzC;AACAD,IAAAA,gBAAgB,CAACD,KAAD,CAAhB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyB,KAAKH,KAApC;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIQ,OAAO,GAAG,eAAH,GACLD,SAAS,CACRE,MADD,CACQ,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAAK,KAAKV,aADhC,EAECW,GAFD,CAEMC,OAAD,iBAAc,oBAAC,OAAD;AACjB,MAAA,GAAG,EAAGA,OAAO,CAACC,QADG;AAEjB,MAAA,QAAQ,EAAGD,OAAO,CAACE,QAFF;AAGjB,MAAA,QAAQ,EAAGF,OAAO,CAACC,QAHF;AAIjB,MAAA,aAAa,EAAGD,OAAO,CAACG,cAJP;AAKjB,MAAA,gBAAgB,EAAGH,OAAO,CAACI,iBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFnB,CAFN,CADF;AAcD;;AA9B8B;;AAiCjCnB,QAAQ,CAACoB,SAAT,GAAqB;AACnBf,EAAAA,KAAK,EAAEZ,SAAS,CAAC4B,MADE;AAEnBL,EAAAA,QAAQ,EAAEvB,SAAS,CAAC6B,MAFD;AAGnBZ,EAAAA,OAAO,EAAEjB,SAAS,CAAC8B;AAHA,EAInBC,UAJF;;AAMA,MAAMC,eAAe,GAAIC,OAAD,KAAc;AACpCrB,EAAAA,KAAK,EAAEqB,OAAO,CAACrB,KADqB;AAEpCI,EAAAA,SAAS,EAAEiB,OAAO,CAACC,YAAR,CAAqBlB,SAArB,CAA+BmB,OAFN;AAGpClB,EAAAA,OAAO,EAAEgB,OAAO,CAACC,YAAR,CAAqBjB;AAHM,CAAd,CAAxB;;AAMA,MAAMmB,kBAAkB,GAAIC,QAAD,KAAe;AACxCxB,EAAAA,gBAAgB,EAAGD,KAAD,IAAWyB,QAAQ,CAACpC,cAAc,CAACW,KAAD,CAAf;AADG,CAAf,CAA3B;;AAIA,eAAeb,OAAO,CAACiC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C7B,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\n\nconst DIFFICULT_POINTS = { hard: 3, medium: 2, easy: 1 };\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    const { token, fetchingQuestion } = this.props;\n    fetchingQuestion(token);\n  }\n\n  render() {\n    const { questions, loading } = this.props;\n    const { questionIndex } = this.state;\n    return (\n      <div>\n        { loading ? 'Carregando...'\n          : questions\n            .filter((_, index) => index === questionIndex)\n            .map((element) => (<Answers\n              key={ element.question }\n              category={ element.category }\n              question={ element.question }\n              correctAnswer={ element.correct_answer }\n              incorrectAnswers={ element.incorrect_answers }\n            />))}\n      </div>\n    );\n  }\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool,\n}.isRequired;\n\nconst mapStateToProps = (payload) => ({\n  token: payload.token,\n  questions: payload.getQuestions.questions.results,\n  loading: payload.getQuestions.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchingQuestion: (token) => dispatch(fetchQuestions(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);\n"]},"metadata":{},"sourceType":"module"}