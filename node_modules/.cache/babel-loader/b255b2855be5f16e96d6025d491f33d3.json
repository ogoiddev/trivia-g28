{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { timerAction, questionIndex, scoreAction } from '../../actions';\nconst CORRECT = 'correct-answer';\nconst NUMBER_SORT = 0.5;\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = event => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(timerAction());\n      clearTimeout(this.timeoutID);\n      if (event.target.id === CORRECT) this.handleScore();\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false\n      });\n    };\n\n    this.handleIndex = () => {\n      const {\n        dispatch,\n        questionNumber,\n        history\n      } = this.props;\n      const MAX_QUESTIONS = 3;\n\n      if (questionNumber > MAX_QUESTIONS) {\n        sispatch(resetRedux());\n        history.push('/feedback');\n      } else {\n        dispatch(questionIndex(questionNumber + 1));\n      }\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = scoreBase + timer * difficultyPoints[difficulty];\n      dispatch(scoreAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    const {\n      dispatch\n    } = this.props;\n    this.timeoutID = setTimeout(() => {\n      dispatch(timerAction());\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false\n      });\n    }, THIRTY);\n  }\n\n  render() {\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    const {\n      isDisabled,\n      nextQuestion,\n      firstQuestion\n    } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, alternatives.sort(() => Math.random() - NUMBER_SORT).map(element => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      key: element,\n      type: \"button\",\n      name: element,\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      id: element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, element)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, !firstQuestion && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleIndex,\n      disabled: nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime\n});\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","timerAction","questionIndex","scoreAction","CORRECT","NUMBER_SORT","Alternatives","constructor","handleClick","event","dispatch","props","clearTimeout","timeoutID","target","id","handleScore","setState","isDisabled","nextQuestion","firstQuestion","handleIndex","questionNumber","history","MAX_QUESTIONS","sispatch","resetRedux","push","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","state","componentDidMount","THIRTY","setTimeout","render","correctAnswer","incorrectAnswers","alternatives","sort","Math","random","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","questionId","index","currentTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { timerAction, questionIndex, scoreAction } from '../../actions';\n\nconst CORRECT = 'correct-answer';\nconst NUMBER_SORT = 0.5;\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true,\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    const { dispatch } = this.props;\n\n    this.timeoutID = setTimeout(() => {\n      dispatch(timerAction());\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false });\n    }, THIRTY);\n  }\n\n  handleClick = (event) => {\n    const { dispatch } = this.props;\n\n    dispatch(timerAction());\n    clearTimeout(this.timeoutID);\n\n    if (event.target.id === CORRECT) this.handleScore();\n\n    this.setState({\n      isDisabled: true,\n      nextQuestion: false,\n      firstQuestion: false,\n    });\n  }\n\n  handleIndex = () => {\n    const { dispatch, questionNumber, history } = this.props;\n    const MAX_QUESTIONS = 3;\n    if (questionNumber > MAX_QUESTIONS) {\n      sispatch(resetRedux());\n      history.push('/feedback');\n    } else {\n      dispatch(questionIndex(questionNumber + 1));\n    }\n  }\n\n  handleScore = () => {\n    const { dispatch, timer, difficulty } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n    const scoreBase = 10;\n    const scoreTotal = scoreBase + (timer * difficultyPoints[difficulty]);\n    dispatch(scoreAction(scoreTotal));\n  }\n\n  render() {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    const { isDisabled, nextQuestion, firstQuestion } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n\n    return (\n      <div data-testid=\"answer-options\">\n        {alternatives.sort(() => Math.random() - NUMBER_SORT)\n          .map((element) => (\n            <button\n              onClick={ this.handleClick }\n              key={ element }\n              type=\"button\"\n              name={ element }\n              disabled={ isDisabled }\n              data-testid={\n                element === correctAnswer\n                  ? CORRECT\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n              id={\n                element === correctAnswer\n                  ? CORRECT\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n            >\n              {element}\n            </button>\n          ))}\n\n        <div>\n          {!firstQuestion\n            && (\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ this.handleIndex }\n                disabled={ nextQuestion }\n              >\n                Próxima\n\n              </button>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}