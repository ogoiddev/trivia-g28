{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { scoreAction, stopActionTime } from '../../actions';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = _ref => {\n      let {\n        target\n      } = _ref;\n      console.log(target.data - testid);\n      const {\n        dispatch\n      } = this.props;\n      dispatch(stopActionTime()); // if (name === true) {\n      //   this.handleScore();\n      // }\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = scoreBase + timer * difficultyPoints[difficulty];\n      dispatch(scoreAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({\n      isDisabled: true\n    }), THIRTY);\n  }\n\n  render() {\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    const {\n      isDisabled\n    } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, shuffle(alternatives).map(element => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      key: element,\n      type: \"button\",\n      name: () => element === correctAnswer,\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? 'correct-answer' : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, element)));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = _ref2 => {\n  let {\n    timer\n  } = _ref2;\n  return {\n    timer: timer.currentTime\n  };\n};\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","shuffle","scoreAction","stopActionTime","Alternatives","constructor","handleClick","target","console","log","data","testid","dispatch","props","handleScore","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","state","isDisabled","componentDidMount","THIRTY","setTimeout","setState","render","correctAnswer","incorrectAnswers","alternatives","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","currentTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { scoreAction, stopActionTime } from '../../actions';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({ isDisabled: true }), THIRTY);\n  }\n\n  handleClick = ({ target }) => {\n    console.log(target.data - testid);\n\n    const { dispatch } = this.props;\n    dispatch(stopActionTime());\n    // if (name === true) {\n    //   this.handleScore();\n    // }\n  }\n\n  handleScore = () => {\n    const { dispatch, timer, difficulty } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n    const scoreBase = 10;\n    const scoreTotal = scoreBase + (timer * difficultyPoints[difficulty]);\n    dispatch(scoreAction(scoreTotal));\n  }\n\n  render() {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    const { isDisabled } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n\n    return (\n      <div data-testid=\"answer-options\">\n        {shuffle(alternatives)\n          .map((element) => (\n            <button\n              onClick={ this.handleClick }\n              key={ element }\n              type=\"button\"\n              name={ () => element === correctAnswer }\n              disabled={ isDisabled }\n              data-testid={\n                element === correctAnswer\n                  ? 'correct-answer'\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n            >\n              { element }\n            </button>\n          ))}\n      </div>\n    );\n  }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = ({ timer }) => ({\n  timer: timer.currentTime,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}