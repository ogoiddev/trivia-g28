{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { timerAction } from '../actions';\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n\n    this.stopTimer = prevState => {\n      const {\n        currentTime,\n        stop\n      } = this.props;\n      const ZERO = 0;\n      const {\n        timer\n      } = this.state;\n\n      if (prevState.timer !== timer && timer === ZERO) {\n        clearInterval(this.intervalId);\n      }\n\n      if (stop) {\n        clearInterval(this.intervalId);\n        currentTime(timer);\n      }\n    };\n\n    this.startTimer = () => {\n      const ONE_SECOND = 1000;\n      this.intervalId = setInterval(() => {\n        this.setState(prev => ({\n          timer: prev.timer - 1\n        }));\n      }, ONE_SECOND);\n    };\n\n    this.state = {\n      timer: 30\n    };\n  }\n\n  componentDidMount() {\n    const {\n      token,\n      fetchingQuestion\n    } = this.props;\n    fetchingQuestion(token);\n    this.startTimer();\n  }\n\n  componentDidUpdate(props, prevState) {\n    this.stopTimer(prevState);\n  }\n\n  render() {\n    const {\n      questions,\n      loading,\n      questionIndex,\n      history\n    } = this.props;\n    const {\n      timer\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, timer), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, loading ? 'Carregando...' : questions.filter((_, index) => index === questionIndex).map(element => /*#__PURE__*/React.createElement(Answers, {\n      key: element.question,\n      category: element.category,\n      difficulty: element.difficulty,\n      question: element.question,\n      correctAnswer: element.correct_answer,\n      incorrectAnswers: element.incorrect_answers,\n      history: history,\n      startTimer: this.startTimer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 34\n      }\n    }))));\n  }\n\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.getQuestions.questions.results,\n  loading: state.getQuestions.loading,\n  stop: state.timer.stop,\n  questionIndex: state.questionId.index\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingQuestion: token => dispatch(fetchQuestions(token)),\n  currentTime: timer => dispatch(timerAction(timer))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx"],"names":["React","Component","connect","PropTypes","fetchQuestions","Answers","timerAction","Gameplay","constructor","stopTimer","prevState","currentTime","stop","props","ZERO","timer","state","clearInterval","intervalId","startTimer","ONE_SECOND","setInterval","setState","prev","componentDidMount","token","fetchingQuestion","componentDidUpdate","render","questions","loading","questionIndex","history","filter","_","index","map","element","question","category","difficulty","correct_answer","incorrect_answers","propTypes","string","object","bool","isRequired","mapStateToProps","getQuestions","results","questionId","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { timerAction } from '../actions';\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 30,\n    };\n  }\n\n  componentDidMount() {\n    const { token, fetchingQuestion } = this.props;\n    fetchingQuestion(token);\n    this.startTimer();\n  }\n\n  componentDidUpdate(props, prevState) {\n    this.stopTimer(prevState);\n  }\n\n  stopTimer = (prevState) => {\n    const { currentTime, stop } = this.props;\n    const ZERO = 0;\n    const { timer } = this.state;\n    if (prevState.timer !== timer && timer === ZERO) {\n      clearInterval(this.intervalId);\n    }\n    if (stop) {\n      clearInterval(this.intervalId);\n      currentTime(timer);\n    }\n  }\n\n  startTimer = () => {\n    const ONE_SECOND = 1000;\n\n    this.intervalId = setInterval(() => {\n      this.setState((prev) => ({ timer: prev.timer - 1 }));\n    }, ONE_SECOND);\n  }\n\n  render() {\n    const { questions, loading, questionIndex, history } = this.props;\n    const { timer } = this.state;\n    return (\n      <>\n        <p>{timer}</p>\n        <div>\n          {loading ? 'Carregando...'\n            : questions\n              .filter((_, index) => index === questionIndex)\n              .map((element) => (<Answers\n                key={ element.question }\n                category={ element.category }\n                difficulty={ element.difficulty }\n                question={ element.question }\n                correctAnswer={ element.correct_answer }\n                incorrectAnswers={ element.incorrect_answers }\n                history={ history }\n                startTimer={ this.startTimer }\n              />))}\n        </div>\n\n      </>\n    );\n  }\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.getQuestions.questions.results,\n  loading: state.getQuestions.loading,\n  stop: state.timer.stop,\n  questionIndex: state.questionId.index,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchingQuestion: (token) => dispatch(fetchQuestions(token)),\n  currentTime: (timer) => dispatch(timerAction(timer)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);\n"]},"metadata":{},"sourceType":"module"}