{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { timerAction, questionIndex, scoreAction, setRanking } from '../../actions';\nimport * as S from './cssGameplay/Alternativas';\nconst CORRECT = 'correct-answer';\nconst NUMBER_SORT = 0.5;\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.startTimer = () => {\n      this.sortListOfQuestions();\n      const THIRTY = 30000;\n      const {\n        dispatch\n      } = this.props;\n      this.timeoutID = setTimeout(() => {\n        dispatch(timerAction());\n        this.setState({\n          isDisabled: true,\n          nextQuestion: false,\n          firstQuestion: false\n        });\n      }, THIRTY);\n    };\n\n    this.sortListOfQuestions = () => {\n      const {\n        correctAnswer,\n        incorrectAnswers\n      } = this.props;\n      this.setState({\n        alternatives: [correctAnswer, ...incorrectAnswers]\n      });\n    };\n\n    this.handleClick = event => {\n      const {\n        dispatch\n      } = this.props;\n\n      if (event.target.id === 'correct-answer') {\n        this.handleScore();\n      }\n\n      dispatch(timerAction());\n      clearTimeout(this.timeoutID);\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false\n      });\n    };\n\n    this.handleIndex = () => {\n      const {\n        dispatch,\n        questionNumber,\n        history,\n        player: {\n          name,\n          score,\n          gravatarImg\n        }\n      } = this.props;\n      const MAX_QUESTIONS = 3;\n\n      if (questionNumber > MAX_QUESTIONS) {\n        dispatch(setRanking({\n          name,\n          score,\n          gravatarImg\n        }));\n        history.push('/feedback');\n      } else {\n        dispatch(questionIndex(questionNumber + 1));\n      }\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = scoreBase + timer * difficultyPoints[difficulty];\n      dispatch(scoreAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true,\n      alternatives: []\n    };\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prev) {\n    const {\n      correctAnswer\n    } = this.props;\n\n    if (!prev.correctAnswer && correctAnswer) {}\n  }\n\n  render() {\n    const {\n      isDisabled,\n      nextQuestion,\n      firstQuestion,\n      alternatives\n    } = this.state;\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(S.ContainerAlt, {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, alternatives.sort(() => Math.random() - NUMBER_SORT).map(element => /*#__PURE__*/React.createElement(S.Buttons, {\n      onClick: this.handleClick,\n      key: element,\n      type: \"button\",\n      name: element,\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      id: element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, element))), /*#__PURE__*/React.createElement(S.ProxButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, !firstQuestion && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleIndex,\n      disabled: nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime,\n  player: state.player\n});\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","timerAction","questionIndex","scoreAction","setRanking","S","CORRECT","NUMBER_SORT","Alternatives","constructor","startTimer","sortListOfQuestions","THIRTY","dispatch","props","timeoutID","setTimeout","setState","isDisabled","nextQuestion","firstQuestion","correctAnswer","incorrectAnswers","alternatives","handleClick","event","target","id","handleScore","clearTimeout","handleIndex","questionNumber","history","player","name","score","gravatarImg","MAX_QUESTIONS","push","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","state","componentDidMount","componentDidUpdate","prev","render","sort","Math","random","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","questionId","index","currentTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { timerAction, questionIndex, scoreAction, setRanking } from '../../actions';\nimport * as S from './cssGameplay/Alternativas';\n\nconst CORRECT = 'correct-answer';\nconst NUMBER_SORT = 0.5;\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true,\n      alternatives: [],\n    };\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate(prev) {\n    const { correctAnswer } = this.props;\n    if (!prev.correctAnswer && correctAnswer) { }\n  }\n\n  startTimer = () => {\n    this.sortListOfQuestions();\n    const THIRTY = 30000;\n    const { dispatch } = this.props;\n    this.timeoutID = setTimeout(() => {\n      dispatch(timerAction());\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false });\n    }, THIRTY);\n  }\n\n  sortListOfQuestions = () => {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    this.setState({\n      alternatives: [correctAnswer, ...incorrectAnswers],\n    });\n  }\n\n  handleClick = (event) => {\n    const { dispatch } = this.props;\n    if (event.target.id === 'correct-answer') {\n      this.handleScore();\n    }\n\n    dispatch(timerAction());\n    clearTimeout(this.timeoutID);\n\n    this.setState({\n      isDisabled: true,\n      nextQuestion: false,\n      firstQuestion: false,\n    });\n  }\n\n  handleIndex = () => {\n    const { dispatch, questionNumber, history,\n      player: { name, score, gravatarImg },\n    } = this.props;\n    const MAX_QUESTIONS = 3;\n    if (questionNumber > MAX_QUESTIONS) {\n      dispatch(setRanking({ name, score, gravatarImg }));\n      history.push('/feedback');\n    } else {\n      dispatch(questionIndex(questionNumber + 1));\n    }\n  }\n\n  handleScore = () => {\n    const { dispatch, timer, difficulty } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n    const scoreBase = 10;\n    const scoreTotal = scoreBase + (timer * difficultyPoints[difficulty]);\n    dispatch(scoreAction(scoreTotal));\n  }\n\n  render() {\n    const { isDisabled, nextQuestion, firstQuestion, alternatives } = this.state;\n    const { correctAnswer, incorrectAnswers } = this.props;\n    return (\n      <div>\n        <S.ContainerAlt\n          data-testid=\"answer-options\"\n        >\n          {alternatives.sort(() => Math.random() - NUMBER_SORT)\n            .map((element) => (\n              <S.Buttons\n                onClick={ this.handleClick }\n                key={ element }\n                type=\"button\"\n                name={ element }\n                disabled={ isDisabled }\n                data-testid={\n                  element === correctAnswer\n                    ? CORRECT\n                    : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n                }\n                id={\n                  element === correctAnswer\n                    ? CORRECT\n                    : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n                }\n              >\n                {element}\n              </S.Buttons>\n            ))}\n        </S.ContainerAlt>\n        <S.ProxButton>\n          {!firstQuestion\n            && (\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ this.handleIndex }\n                disabled={ nextQuestion }\n              >\n                Próxima\n\n              </button>\n            )}\n        </S.ProxButton>\n      </div>\n    );\n  }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime,\n  player: state.player,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}