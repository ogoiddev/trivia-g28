{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { loginAction, stopActionTime } from '../../actions';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(stopActionTime());\n      this.handleScore();\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = {\n        score: scoreBase + timer * difficultyPoints[difficulty]\n      };\n      dispatch(loginAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({\n      isDisabled: true\n    }), THIRTY);\n  }\n\n  render() {\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    const {\n      isDisabled\n    } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, shuffle(alternatives).map(element => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      key: element,\n      type: \"button\",\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? 'correct-answer' : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, element)));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = _ref => {\n  let {\n    timer\n  } = _ref;\n  return {\n    timer: timer.currentTime\n  };\n};\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","shuffle","loginAction","stopActionTime","Alternatives","constructor","handleClick","dispatch","props","handleScore","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","score","state","isDisabled","componentDidMount","THIRTY","setTimeout","setState","render","correctAnswer","incorrectAnswers","alternatives","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","currentTime"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,eAA5C;;AAEA,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AACnCO,EAAAA,WAAW,GAAG;AACZ;;AADY,SAYdC,WAZc,GAYA,MAAM;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAA1B;AACAD,MAAAA,QAAQ,CAACJ,cAAc,EAAf,CAAR;AACA,WAAKM,WAAL;AACD,KAhBa;;AAAA,SAkBdA,WAlBc,GAkBA,MAAM;AAClB,YAAM;AAAEF,QAAAA,QAAF;AAAYG,QAAAA,KAAZ;AAAmBC,QAAAA;AAAnB,UAAkC,KAAKH,KAA7C;AACA,YAAMI,gBAAgB,GAAG;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE,CAAnB;AAAsBC,QAAAA,IAAI,EAAE;AAA5B,OAAzB;AACA,YAAMC,SAAS,GAAG,EAAlB;AACA,YAAMC,UAAU,GAAG;AAAEC,QAAAA,KAAK,EAAEF,SAAS,GAAIN,KAAK,GAAGE,gBAAgB,CAACD,UAAD;AAA9C,OAAnB;AACAJ,MAAAA,QAAQ,CAACL,WAAW,CAACe,UAAD,CAAZ,CAAR;AACD,KAxBa;;AAEZ,SAAKE,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAf;AACAC,IAAAA,UAAU,CAAC,MAAM,KAAKC,QAAL,CAAc;AAAEJ,MAAAA,UAAU,EAAE;AAAd,KAAd,CAAP,EAA4CE,MAA5C,CAAV;AACD;;AAgBDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAsC,KAAKnB,KAAjD;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AACA,UAAMS,YAAY,GAAG,CAACF,aAAD,EAAgB,GAAGC,gBAAnB,CAArB;AAEA,wBACE;AAAK,qBAAY,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG1B,OAAO,CAAC2B,YAAD,CAAP,CACEC,GADF,CACOC,OAAD,iBACH;AACE,MAAA,OAAO,EAAG,KAAKxB,WADjB;AAEE,MAAA,GAAG,EAAGwB,OAFR;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,QAAQ,EAAGV,UAJb;AAKE,qBACEU,OAAO,KAAKJ,aAAZ,GACI,gBADJ,GAEK,gBAAeC,gBAAgB,CAACI,OAAjB,CAAyBD,OAAzB,CAAkC,EAR1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWIA,OAXJ,CAFH,CADH,CADF;AAoBD;;AApDkC;;AAuDrC1B,YAAY,CAAC4B,SAAb,GAAyB;AACvBL,EAAAA,gBAAgB,EAAE5B,SAAS,CAACkC,MADL;AAEvBP,EAAAA,aAAa,EAAE3B,SAAS,CAACmC;AAFF,EAGvBC,UAHF;;AAKA,MAAMC,eAAe,GAAG;AAAA,MAAC;AAAE1B,IAAAA;AAAF,GAAD;AAAA,SAAgB;AACtCA,IAAAA,KAAK,EAAEA,KAAK,CAAC2B;AADyB,GAAhB;AAAA,CAAxB;;AAIA,eAAerC,OAAO,CAACoC,eAAD,CAAP,CAAyBhC,YAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { loginAction, stopActionTime } from '../../actions';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({ isDisabled: true }), THIRTY);\n  }\n\n  handleClick = () => {\n    const { dispatch } = this.props;\n    dispatch(stopActionTime());\n    this.handleScore();\n  }\n\n  handleScore = () => {\n    const { dispatch, timer, difficulty } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n    const scoreBase = 10;\n    const scoreTotal = { score: scoreBase + (timer * difficultyPoints[difficulty]) };\n    dispatch(loginAction(scoreTotal));\n  }\n\n  render() {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    const { isDisabled } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n\n    return (\n      <div data-testid=\"answer-options\">\n        {shuffle(alternatives)\n          .map((element) => (\n            <button\n              onClick={ this.handleClick }\n              key={ element }\n              type=\"button\"\n              disabled={ isDisabled }\n              data-testid={\n                element === correctAnswer\n                  ? 'correct-answer'\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n            >\n              { element }\n            </button>\n          ))}\n      </div>\n    );\n  }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = ({ timer }) => ({\n  timer: timer.currentTime,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}