{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { loginAction, stopActionTime, questionIndex } from '../../actions';\nconst CORRECT = 'correct-answer';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = event => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(stopActionTime());\n\n      if (event.target.id === CORRECT) {\n        this.handleScore();\n        this.setState({\n          isDisabled: true,\n          nextQuestion: false,\n          firstQuestion: false\n        });\n      } else {\n        this.setState({\n          isDisabled: true,\n          nextQuestion: true,\n          firstQuestion: false\n        });\n      }\n    };\n\n    this.handleIndex = () => {\n      const {\n        dispatch,\n        questionNumber,\n        history\n      } = this.props;\n      const MAX_QUESTIONS = 3;\n\n      if (questionNumber > MAX_QUESTIONS) {\n        history.push('/feedback');\n      } else {\n        dispatch(questionIndex(questionNumber + 1));\n      }\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = scoreBase + timer * difficultyPoints[difficulty];\n      dispatch(scoreAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({\n      isDisabled: true\n    }), THIRTY);\n  }\n\n  render() {\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    const {\n      isDisabled,\n      nextQuestion,\n      firstQuestion\n    } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, shuffle(alternatives).map(element => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      key: element,\n      name: element,\n      type: \"button\",\n      name: element === correctAnswer ? 'correct' : 'wrong',\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      id: element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, element)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, !firstQuestion && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleIndex,\n      disabled: nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime\n});\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","shuffle","loginAction","stopActionTime","questionIndex","CORRECT","Alternatives","constructor","handleClick","event","dispatch","props","target","id","handleScore","setState","isDisabled","nextQuestion","firstQuestion","handleIndex","questionNumber","history","MAX_QUESTIONS","push","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","scoreAction","state","componentDidMount","THIRTY","setTimeout","render","correctAnswer","incorrectAnswers","alternatives","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","questionId","index","currentTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { loginAction, stopActionTime, questionIndex } from '../../actions';\n\nconst CORRECT = 'correct-answer';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true,\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    setTimeout(() => this.setState({ isDisabled: true }), THIRTY);\n  }\n\n  handleClick = (event) => {\n    const { dispatch } = this.props;\n    dispatch(stopActionTime());\n    if (event.target.id === CORRECT) {\n      this.handleScore();\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false,\n      });\n    } else {\n      this.setState({\n        isDisabled: true,\n        nextQuestion: true,\n        firstQuestion: false,\n      });\n    }\n  }\n\n  handleIndex = () => {\n    const { dispatch, questionNumber, history } = this.props;\n    const MAX_QUESTIONS = 3;\n    if (questionNumber > MAX_QUESTIONS) {\n      history.push('/feedback');\n    } else {\n      dispatch(questionIndex(questionNumber + 1));\n    }\n  }\n\n      handleScore = () => {\n        const { dispatch, timer, difficulty } = this.props;\n        const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n        const scoreBase = 10;\n        const scoreTotal = scoreBase + (timer * difficultyPoints[difficulty]);\n        dispatch(scoreAction(scoreTotal));\n      }\n\n      render() {\n        const { correctAnswer, incorrectAnswers } = this.props;\n        const { isDisabled, nextQuestion, firstQuestion } = this.state;\n        const alternatives = [correctAnswer, ...incorrectAnswers];\n\n        return (\n          <div data-testid=\"answer-options\">\n            {shuffle(alternatives)\n              .map((element) => (\n                <button\n                  onClick={ this.handleClick }\n                  key={ element }\n                  name={ element }\n                  type=\"button\"\n                  name={ element === correctAnswer\n                    ? 'correct'\n                    : 'wrong' }\n                  disabled={ isDisabled }\n                  data-testid={\n                    element === correctAnswer\n                      ? CORRECT\n                      : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n                  }\n                  id={\n                    element === correctAnswer\n                      ? CORRECT\n                      : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n                  }\n                >\n                  {element}\n                </button>\n              ))}\n\n            <div>\n              {!firstQuestion\n                && (\n                  <button\n                    type=\"button\"\n                    data-testid=\"btn-next\"\n                    onClick={ this.handleIndex }\n                    disabled={ nextQuestion }\n                  >\n                    Próxima\n\n                  </button>\n                )}\n            </div>\n          </div>\n        );\n      }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}