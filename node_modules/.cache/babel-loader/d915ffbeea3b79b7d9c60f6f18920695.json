{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { timerAction } from '../actions';\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n\n    this.stopTimer = prevState => {\n      const {\n        dispatch,\n        stop\n      } = this.props;\n      const ZERO = 0;\n      const {\n        timer\n      } = this.state;\n\n      if (prevState.timer !== timer && timer === ZERO) {\n        clearInterval(this.intervalId);\n      }\n\n      if (stop) {\n        clearInterval(this.intervalId);\n        dispatch(timerAction(timer));\n      }\n    };\n\n    this.state = {\n      questionIndex: 0,\n      timer: 30\n    };\n  }\n\n  componentDidMount() {\n    const {\n      token,\n      fetchingQuestion\n    } = this.props;\n    const ONE_SECOND = 1000;\n    fetchingQuestion(token);\n    this.intervalId = setInterval(() => {\n      this.setState(prev => ({\n        timer: prev.timer - 1\n      }));\n    }, ONE_SECOND);\n  }\n\n  componentDidUpdate(props, prevState) {\n    this.stopTimer(prevState);\n  }\n\n  render() {\n    const {\n      questions,\n      loading\n    } = this.props;\n    const {\n      questionIndex,\n      timer\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, timer), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, loading ? 'Carregando...' : questions.filter((_, index) => index === questionIndex).map(element => /*#__PURE__*/React.createElement(Answers, {\n      key: element.question,\n      category: element.category,\n      question: element.question,\n      correctAnswer: element.correct_answer,\n      incorrectAnswers: element.incorrect_answers,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 34\n      }\n    }))));\n  }\n\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool\n}.isRequired;\n\nconst mapStateToProps = payload => ({\n  token: payload.token,\n  questions: payload.getQuestions.questions.results,\n  loading: payload.getQuestions.loading,\n  stop: payload.saveTimer.stop\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchingQuestion: token => dispatch(fetchQuestions(token))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/Gameplay.jsx"],"names":["React","Component","connect","PropTypes","fetchQuestions","Answers","timerAction","Gameplay","constructor","stopTimer","prevState","dispatch","stop","props","ZERO","timer","state","clearInterval","intervalId","questionIndex","componentDidMount","token","fetchingQuestion","ONE_SECOND","setInterval","setState","prev","componentDidUpdate","render","questions","loading","filter","_","index","map","element","question","category","correct_answer","incorrect_answers","propTypes","string","object","bool","isRequired","mapStateToProps","payload","getQuestions","results","saveTimer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/API';\nimport Answers from './GameplayComponents/Answers';\nimport { timerAction } from '../actions';\n\nclass Gameplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questionIndex: 0,\n      timer: 30,\n    };\n  }\n\n  componentDidMount() {\n    const { token, fetchingQuestion } = this.props;\n    const ONE_SECOND = 1000;\n\n    fetchingQuestion(token);\n\n    this.intervalId = setInterval(() => {\n      this.setState((prev) => ({ timer: prev.timer - 1 }));\n    }, ONE_SECOND);\n  }\n\n  componentDidUpdate(props, prevState) {\n    this.stopTimer(prevState);\n  }\n\n  stopTimer = (prevState) => {\n    const { dispatch, stop } = this.props;\n    const ZERO = 0;\n    const { timer } = this.state;\n    if (prevState.timer !== timer && timer === ZERO) {\n      clearInterval(this.intervalId);\n    }\n    if (stop) {\n      clearInterval(this.intervalId);\n      dispatch(timerAction(timer));\n    }\n  }\n\n  render() {\n    const { questions, loading } = this.props;\n    const { questionIndex, timer } = this.state;\n    return (\n      <>\n        <p>{timer}</p>\n        <div>\n          { loading ? 'Carregando...'\n            : questions\n              .filter((_, index) => index === questionIndex)\n              .map((element) => (<Answers\n                key={ element.question }\n                category={ element.category }\n                question={ element.question }\n                correctAnswer={ element.correct_answer }\n                incorrectAnswers={ element.incorrect_answers }\n              />))}\n        </div>\n      </>\n    );\n  }\n}\n\nGameplay.propTypes = {\n  token: PropTypes.string,\n  question: PropTypes.object,\n  loading: PropTypes.bool,\n}.isRequired;\n\nconst mapStateToProps = (payload) => ({\n  token: payload.token,\n  questions: payload.getQuestions.questions.results,\n  loading: payload.getQuestions.loading,\n  stop: payload.saveTimer.stop,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchingQuestion: (token) => dispatch(fetchQuestions(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameplay);\n"]},"metadata":{},"sourceType":"module"}