{"ast":null,"code":"var _jsxFileName = \"/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { stopActionTime, questionIndex, scoreAction } from '../../actions';\nconst CORRECT = 'correct-answer';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n\n    this.handleSetTimeout = () => {\n      setTimeout(() => this.setState({\n        isDisabled: true\n      }), THIRTY);\n    };\n\n    this.handleClick = event => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(stopActionTime());\n\n      if (event.target.id === CORRECT) {\n        this.handleScore();\n        this.setState({\n          isDisabled: true,\n          nextQuestion: false,\n          firstQuestion: false\n        });\n      } else {\n        this.setState({\n          isDisabled: true,\n          nextQuestion: false,\n          firstQuestion: false\n        });\n      }\n    };\n\n    this.handleIndex = () => {\n      const {\n        dispatch,\n        questionNumber,\n        history\n      } = this.props;\n      const MAX_QUESTIONS = 3;\n      this.setTimeout();\n\n      if (questionNumber > MAX_QUESTIONS) {\n        history.push('/feedback');\n      } else {\n        dispatch(questionIndex(questionNumber + 1));\n      }\n    };\n\n    this.handleScore = () => {\n      const {\n        dispatch,\n        timer,\n        difficulty\n      } = this.props;\n      const difficultyPoints = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const scoreBase = 10;\n      const scoreTotal = scoreBase + timer * difficultyPoints[difficulty];\n      dispatch(scoreAction(scoreTotal));\n    };\n\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    this.handleSetTimeout(THIRTY);\n  }\n\n  render() {\n    const {\n      correctAnswer,\n      incorrectAnswers\n    } = this.props;\n    const {\n      isDisabled,\n      nextQuestion,\n      firstQuestion\n    } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, shuffle(alternatives).map(element => /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      key: element,\n      type: \"button\",\n      name: element,\n      disabled: isDisabled,\n      \"data-testid\": element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      id: element === correctAnswer ? CORRECT : `wrong-answer-${incorrectAnswers.indexOf(element)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, element)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, !firstQuestion && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleIndex,\n      disabled: nextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime\n});\n\nexport default connect(mapStateToProps)(Alternatives);","map":{"version":3,"sources":["/home/ogoidmp/dmpdev/projetos-trybe/sd-019-c-project-trivia-react-redux/src/components/GameplayComponents/Alternatives.jsx"],"names":["React","Component","PropTypes","connect","shuffle","stopActionTime","questionIndex","scoreAction","CORRECT","Alternatives","constructor","handleSetTimeout","setTimeout","setState","isDisabled","THIRTY","handleClick","event","dispatch","props","target","id","handleScore","nextQuestion","firstQuestion","handleIndex","questionNumber","history","MAX_QUESTIONS","push","timer","difficulty","difficultyPoints","hard","medium","easy","scoreBase","scoreTotal","state","componentDidMount","render","correctAnswer","incorrectAnswers","alternatives","map","element","indexOf","propTypes","object","string","isRequired","mapStateToProps","questionId","index","currentTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport shuffle from '../../services/shuffle';\nimport { stopActionTime, questionIndex, scoreAction } from '../../actions';\n\nconst CORRECT = 'correct-answer';\n\nclass Alternatives extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isDisabled: false,\n      nextQuestion: true,\n      firstQuestion: true,\n    };\n  }\n\n  componentDidMount() {\n    const THIRTY = 30000;\n    this.handleSetTimeout(THIRTY);\n  }\n\n  handleSetTimeout = () => {\n    setTimeout(() => this.setState({ isDisabled: true }), THIRTY);\n  }\n\n  handleClick = (event) => {\n    const { dispatch } = this.props;\n    dispatch(stopActionTime());\n    if (event.target.id === CORRECT) {\n      this.handleScore();\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false,\n      });\n    } else {\n      this.setState({\n        isDisabled: true,\n        nextQuestion: false,\n        firstQuestion: false,\n      });\n    }\n  }\n\n  handleIndex = () => {\n    const { dispatch, questionNumber, history } = this.props;\n    const MAX_QUESTIONS = 3;\n    this.setTimeout();\n    if (questionNumber > MAX_QUESTIONS) {\n      history.push('/feedback');\n    } else {\n      dispatch(questionIndex(questionNumber + 1));\n    }\n  }\n\n  handleScore = () => {\n    const { dispatch, timer, difficulty } = this.props;\n    const difficultyPoints = { hard: 3, medium: 2, easy: 1 };\n    const scoreBase = 10;\n    const scoreTotal = scoreBase + (timer * difficultyPoints[difficulty]);\n    dispatch(scoreAction(scoreTotal));\n  }\n\n  render() {\n    const { correctAnswer, incorrectAnswers } = this.props;\n    const { isDisabled, nextQuestion, firstQuestion } = this.state;\n    const alternatives = [correctAnswer, ...incorrectAnswers];\n\n    return (\n      <div data-testid=\"answer-options\">\n        {shuffle(alternatives)\n          .map((element) => (\n            <button\n              onClick={ this.handleClick }\n              key={ element }\n              type=\"button\"\n              name={ element }\n              disabled={ isDisabled }\n              data-testid={\n                element === correctAnswer\n                  ? CORRECT\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n              id={\n                element === correctAnswer\n                  ? CORRECT\n                  : `wrong-answer-${incorrectAnswers.indexOf(element)}`\n              }\n            >\n              {element}\n            </button>\n          ))}\n\n        <div>\n          {!firstQuestion\n            && (\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                onClick={ this.handleIndex }\n                disabled={ nextQuestion }\n              >\n                Próxima\n\n              </button>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nAlternatives.propTypes = {\n  incorrectAnswers: PropTypes.object,\n  correctAnswer: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  questionNumber: state.questionId.index,\n  timer: state.timer.currentTime,\n});\n\nexport default connect(mapStateToProps)(Alternatives);\n"]},"metadata":{},"sourceType":"module"}